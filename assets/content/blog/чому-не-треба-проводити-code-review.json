{
  "title": "Why we don't need a code review?",
  "thumbnail": "/img/review.png",
  "date": "2019-12-01T20:21:58.027Z",
  "description": "In internet we have a huge amount of articles which say that code review is awesome thing, which increase reliability, perfomance and another KPI. But this article named this practice absolutely malicious.",
  "body": "In internet we have a huge amount of articles which say that code review is awesome thing, which increase reliability, perfomance and another KPI. But this article named this practice absolutely malicious.\n\nThe main reasons for not doing code review:\n\n* impossible time evaluation for task complete\n* constantly conflict conducting\n* blurring responsibility\n* waste of resources\n\n**Time evaluation**\n\nOnce considered that skill to do correct estimate for task is must have for coder.  It's clear that in some situations( for exaple, when you're looking for a bug) it hard to do, but in most cases you can do this. The problem of code-review is that it makes no-sense to do any evaluation. The process of code-review is not predictable. Maybe you should be correct a few lines of code or reviewer will require a complete reworking of the task.\n\n**Relations between co-workers**\n\n**Відносини у колективі**\n\nПочнемо з прикладу: одного разу я був свідком, як один розробник після отримання зауваження, пішов до рев'ювера і почав йому щось довго і нудно розповідати. Фактично це було компостування мозку, яке тривало півтори години та виявилось дуже дієвим — потім цей рев'ювер вже ніяких зауважень розробникові не робив.\n\nУ командах, які практикують рев'ю коду, відбувається всяка погана річ:\n\n* самоствердження шляхом менш конфліктних людей та «дідівщина»;\n* помста: «хтось посмів зробити мені зауваження, завтра я йому зроблю два»;\n* коаліції: «ми з товаришем затверджуємо одне одного, а всім іншим ставимо мінуси»;\n* суперництво: «я свою фічу ніяк не завершу, а колега вже дві зробив, хай тепер переробляє».\n\nРезультатом цього всього є демотивація та вигорання. Ще один випадок з життя: одного разу мені щось не сподобалось у рев'ю, але я не став про це відразу казати, бо знав, що автор того коду — людина досить вперта і мстива. Тому я трохи почекав, поки в іншого мого колеги буде гарний настрій, пішов до нього і розповів про проблему та про методи її вирішення. Вмовив і потім ми разом пішли вмовляти автора коду. Після такої хитрої комбінації вдалось добитися втілення одного зауваження з трьох. Ясно, що після того я вже ніякі зауваження старався не робити.\n\n**Розмивання відповідальності**\n\nТут справа не в тому, щоб шукати винних — все одно більшість з нас нічого не втратить, якщо десь з'явиться якийсь баг.\n\nПроблема в тому, що люди бояться приймати рішення. Вони думають, що десь там (може навіть в іншій команді) знайдеться мудра досвідчена людина, яку можна запитати й вона скаже, як правильно робити. Це хибний шлях. Якщо ви проаналізуєте варіанти рішення, виберете один, реалізуєте й оціните результат — в нагороду отримаєте досвід. Якщо перекладете це на когось іншого — досвід буде втрачено.\n\n**Витрата ресурсів**\n\nОчевидно, що рев'ю забирає час розробників. Крім того, потрібен окремий сервер для системи, за допомогою якої роблять рев'ю та людина для догляду за ним.\n\nПроблема в тому, що перегляд коду в принципі не може бути ефективним. Є такий закон тривіальності (англ. «bike-shed effect»): чим менше значення має якась деталь, тим більше її будуть обговорювати. Для нас це означає, що люди годинами сперечатимуться про назви змінних або довжину методів в той час як реально важливі речі пройдуть поза увагою.\n\n**Інші аргументи**\n\nПрихильники code review вважають, що завдяки цій практиці серед членів команди відбувається розповсюдження знань про код. В цілому це правильно, але є одне але: рев'ювер бачить лише фінальний результат. В процесі вирішення завдання розробник зустрічається з різними невідповідностями та неочевидними проблемами, під час вирішення яких і формується «знання коду». Рев'ювер цих проблем не побачить, поки сам не почне щось втілювати, відповідно, справжнього досвіду у нього не буде.\n\nТакож кажуть, що code review сприяє «загальному покращенню коду» і це геть невірно. Річ у тім, що погані рішення розповсюджуються з тою ж силою, що й добрі. Наприклад, у мене був випадок, коли я отримав зауваження, повірив рев'юверу на слово і виправив код. Потім я в такій же ситуації теж почав робити зауваження іншим людям, і вони їх виконували. Але пізніше я детальніше розглянув ту ситуацію і виявив, що перший рев'ювер помилявся — і в результаті тієї помилки всі змінили купу коду у неправильний спосіб.\n\nНасправді єдина ситуація, де перегляд коду стає у пригоді — навчання джуніорів. Там можна уникнути конфліктів завдяки чітко сформульованим відносинам майстер-підлеглий, а додаткові витрати є частиною процесу. В інших випадках впровадження практики обов'язкового code review призведе до отруєння команди та руйнування проекту.\n\nДжерело: codeguida.com"
}